//---------------------------------------------
//파일명 : udp_talkserv_c
//기능 : 토크 클라이언트와 1:1 통신을 한다
//컴파일 : cc -o udp_talkserv udp_talkserv.c
//사용법 : udp_talkserv 3025
//---------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

char *EXIT_STRING = "exit";     //종료문자
#define MAXLINE 511

int main(int argc, char *argv[]){
        struct sockaddr_in servaddr, cliaddr;
        int s, nbyte, addrlen;
        char sendMsg[MAXLINE+1], recvMsg[MAXLINE+1];
        pid_t pid;

        if(argc != 2){
                printf("usage: %s port\n", argv[0]);
                exit(0);
        }
        //소켓 생성
        if((s = socket(PF_INET, SOCK_DGRAM, 0)) < 0) {
                perror("socket fail");
                exit(0);
        }

        //servaddr을 '\0'으로 초기화
        bzero((char *)&servaddr, sizeof(servaddr));
        //servaddr 세팅
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
        servaddr.sin_port = htons(atoi(argv[1]));

        //bind() 호출
        if(bind(s, (struct sockaddr*)&servaddr, sizeof(servaddr))<0){
        perror("bind fail");
                exit(0);
        }

        puts("서버가 클라이언트를 기다리고 있습니다...");

        addrlen = sizeof(cliaddr);
        if((nbyte=recvfrom(s, recvMsg, MAXLINE, 0, (struct sockaddr*)&cliaddr, &addrlen)) < 0 ) {
                perror("recvfrom fail");
                exit(0);
        }

        recvMsg[nbyte] = '\0';
        printf("%s", recvMsg);
        memset(recvMsg, 0, MAXLINE+1);

        //클라이언트 연결요청 수락
        if((pid = fork()) > 0){
                while(fgets(sendMsg, MAXLINE, stdin) != NULL) {
                        nbyte = strlen(sendMsg);
                                if(sendto(s, sendMsg, strlen(sendMsg), 0, (struct sockaddr*)&cliaddr, addrlen) != nbyte){
                                        perror("sendto fail");
                                        close(s);
                                        exit(0);
                                }
                                if(strstr(sendMsg, EXIT_STRING) != NULL){
                                        puts("Good bye.");
                                        close(s);
                                        exit(0);
                                }
                }
        }
        else if(pid == 0){
                while(1){
                        if((nbyte = recvfrom(s, recvMsg, MAXLINE, 0, NULL, NULL)) < 0) {
                                perror("recvfrom fail");
                                close(s);
                                exit(0);
                        }
                        recvMsg[nbyte] = '\0';
                        if(strstr(recvMsg, EXIT_STRING) != NULL) break;
                        printf("%s", recvMsg);
                }
        }
        close(s);
        return 0;
}
