//------------------------------------------------------
//파일명 : udp_talkcli.c
//기능 : 토크 서버와 1:1 통신을 하는 클라이언트 프로그램
//컴파일 : cc -o udp_talkcli udp_talkcli.c
//사용법 : udp_talkcli 117.17.142.131  3025
//------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

char *EXIT_STRING = "exit";     //종료문자
#define MAXLINE 511

int main(int argc, char *argv[]){
        struct sockaddr_in servaddr;
        pid_t pid;
        int s, nbyte, addrlen = sizeof(servaddr);
        char recvMsg[MAXLINE+1];
        char sendMsg[MAXLINE+1] = "클라이언트가 연결되었습니다...\n";

        if(argc != 3){
                printf("usage: %s server_ip port\n", argv[0]);
                exit(0);
        }
        //소켓 생성
        if((s = socket(PF_INET, SOCK_DGRAM, 0)) < 0) {
                printf("socket fail");
                exit(0);
        }

        //servaddr을 '\0'으로 초기화
        bzero((char *)&servaddr, sizeof(servaddr));
        //servaddr 세팅
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = inet_addr(argv[1]);
        servaddr.sin_port = htons(atoi(argv[2]));

        nbyte = strlen(sendMsg);

        if(sendto(s, sendMsg, strlen(sendMsg), 0, (struct sockaddr*)&servaddr, addrlen) < 0) {
                perror("sendto fail");
                exit(0);
        }

        if((pid=fork()) > 0){
                while(fgets(sendMsg, MAXLINE, stdin) != NULL) {
                        nbyte = strlen(sendMsg);
                        if(sendto(s, sendMsg, strlen(sendMsg), 0, (struct sockaddr *)&servaddr, sizeof(servaddr)) != nbyte){
                                perror("sendto fail");
                                close(s);
                                exit(0);
                        }
                        if(strstr(sendMsg, EXIT_STRING) != NULL) {
                                printf("Good bye.\n");
                                break;
                        }
                }
        }
        else if(pid==0){
                while(1){
                        if((nbyte = recvfrom(s, recvMsg, MAXLINE, 0, NULL, NULL)) < 0) {
                                perror("recvfrom fail");
                                close(s);
                                exit(0);
                        }
                        recvMsg[nbyte] = '\0';
                        if(strstr(recvMsg, EXIT_STRING) != NULL)
                                break;
                        printf("%s", recvMsg);
                }
        }
        close(s);
        return 0;
}
